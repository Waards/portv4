{"ast":null,"code":"import { Scene as e, OrthographicCamera as t, WebGLRenderer as n, TextureLoader as i, LinearFilter as o, VideoTexture as a, ShaderMaterial as r, Vector4 as s, PlaneBufferGeometry as f, Mesh as l } from \"three\";\nimport d from \"gsap/TweenMax\";\nexport default function (v) {\n  function u() {\n    for (var e = arguments, t = 0; t < arguments.length; t++) if (void 0 !== e[t]) return e[t];\n  }\n  console.log(\"%c Hover effect by Robin Delaporte: https://github.com/robin-dela/hover-effect \", \"color: #bada55; font-size: 0.8rem\");\n  var m = v.parent,\n    p = v.displacementImage,\n    c = v.image1,\n    g = v.image2,\n    h = u(v.imagesRatio, 1),\n    y = u(v.intensity1, v.intensity, 1),\n    x = u(v.intensity2, v.intensity, 1),\n    F = u(v.angle, Math.PI / 4),\n    w = u(v.angle1, F),\n    H = u(v.angle2, 3 * -F),\n    W = u(v.speedIn, v.speed, 1.6),\n    E = u(v.speedOut, v.speed, 1.2),\n    P = u(v.hover, !0),\n    U = u(v.easing, Expo.easeOut),\n    C = u(v.video, !1);\n  if (m) {\n    if (c && g && p) {\n      var D = new e(),\n        L = new t(m.offsetWidth / -2, m.offsetWidth / 2, m.offsetHeight / 2, m.offsetHeight / -2, 1, 1e3);\n      L.position.z = 1;\n      var M = new n({\n        antialias: !1,\n        alpha: !0\n      });\n      M.setPixelRatio(2), M.setClearColor(16777215, 0), M.setSize(m.offsetWidth, m.offsetHeight), m.appendChild(M.domElement);\n      var R = function () {\n          M.render(D, L);\n        },\n        V = new i();\n      V.crossOrigin = \"\";\n      var _,\n        z,\n        b = V.load(p, R);\n      if (b.magFilter = b.minFilter = o, C) {\n        var O = function () {\n          requestAnimationFrame(O), M.render(D, L);\n        };\n        O(), (C = document.createElement(\"video\")).autoplay = !0, C.loop = !0, C.src = c, C.load();\n        var S = document.createElement(\"video\");\n        S.autoplay = !0, S.loop = !0, S.src = g, S.load();\n        var I = new a(C),\n          j = new a(S);\n        I.magFilter = j.magFilter = o, I.minFilter = j.minFilter = o, S.addEventListener(\"loadeddata\", function () {\n          S.play(), (j = new a(S)).magFilter = o, j.minFilter = o, A.uniforms.texture2.value = j;\n        }, !1), C.addEventListener(\"loadeddata\", function () {\n          C.play(), (I = new a(C)).magFilter = o, I.minFilter = o, A.uniforms.texture1.value = I;\n        }, !1);\n      } else I = V.load(c, R), j = V.load(g, R), I.magFilter = j.magFilter = o, I.minFilter = j.minFilter = o;\n      var q = h;\n      m.offsetHeight / m.offsetWidth < q ? (_ = 1, z = m.offsetHeight / m.offsetWidth / q) : (_ = m.offsetWidth / m.offsetHeight * q, z = 1);\n      var A = new r({\n          uniforms: {\n            intensity1: {\n              type: \"f\",\n              value: y\n            },\n            intensity2: {\n              type: \"f\",\n              value: x\n            },\n            dispFactor: {\n              type: \"f\",\n              value: 0\n            },\n            angle1: {\n              type: \"f\",\n              value: w\n            },\n            angle2: {\n              type: \"f\",\n              value: H\n            },\n            texture1: {\n              type: \"t\",\n              value: I\n            },\n            texture2: {\n              type: \"t\",\n              value: j\n            },\n            disp: {\n              type: \"t\",\n              value: b\n            },\n            res: {\n              type: \"vec4\",\n              value: new s(m.offsetWidth, m.offsetHeight, _, z)\n            },\n            dpr: {\n              type: \"f\",\n              value: window.devicePixelRatio\n            }\n          },\n          vertexShader: \"\\nvarying vec2 vUv;\\nvoid main() {\\n  vUv = uv;\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\\n}\\n\",\n          fragmentShader: \"\\nvarying vec2 vUv;\\n\\nuniform float dispFactor;\\nuniform float dpr;\\nuniform sampler2D disp;\\n\\nuniform sampler2D texture1;\\nuniform sampler2D texture2;\\nuniform float angle1;\\nuniform float angle2;\\nuniform float intensity1;\\nuniform float intensity2;\\nuniform vec4 res;\\nuniform vec2 parent;\\n\\nmat2 getRotM(float angle) {\\n  float s = sin(angle);\\n  float c = cos(angle);\\n  return mat2(c, -s, s, c);\\n}\\n\\nvoid main() {\\n  vec4 disp = texture2D(disp, vUv);\\n  vec2 dispVec = vec2(disp.r, disp.g);\\n\\n  vec2 uv = 0.5 * gl_FragCoord.xy / (res.xy) ;\\n  vec2 myUV = (uv - vec2(0.5))*res.zw + vec2(0.5);\\n\\n\\n  vec2 distortedPosition1 = myUV + getRotM(angle1) * dispVec * intensity1 * dispFactor;\\n  vec2 distortedPosition2 = myUV + getRotM(angle2) * dispVec * intensity2 * (1.0 - dispFactor);\\n  vec4 _texture1 = texture2D(texture1, distortedPosition1);\\n  vec4 _texture2 = texture2D(texture2, distortedPosition2);\\n  gl_FragColor = mix(_texture1, _texture2, dispFactor);\\n}\\n\",\n          transparent: !0,\n          opacity: 1\n        }),\n        T = new f(m.offsetWidth, m.offsetHeight, 1),\n        k = new l(T, A);\n      D.add(k), P && (m.addEventListener(\"mouseenter\", B), m.addEventListener(\"touchstart\", B), m.addEventListener(\"mouseleave\", G), m.addEventListener(\"touchend\", G)), window.addEventListener(\"resize\", function (e) {\n        m.offsetHeight / m.offsetWidth < q ? (_ = 1, z = m.offsetHeight / m.offsetWidth / q) : (_ = m.offsetWidth / m.offsetHeight * q, z = 1), k.material.uniforms.res.value = new s(m.offsetWidth, m.offsetHeight, _, z), M.setSize(m.offsetWidth, m.offsetHeight), R();\n      }), this.next = B, this.previous = G;\n    } else console.warn(\"One or more images are missing\");\n  } else console.warn(\"Parent missing\");\n  function B() {\n    d.to(A.uniforms.dispFactor, W, {\n      value: 1,\n      ease: U,\n      onUpdate: R,\n      onComplete: R\n    });\n  }\n  function G() {\n    d.to(A.uniforms.dispFactor, E, {\n      value: 0,\n      ease: U,\n      onUpdate: R,\n      onComplete: R\n    });\n  }\n}","map":{"version":3,"mappings":"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","names":["opts","firstDefined","i","arguments","length","undefined","console","log","parent","dispImage","displacementImage","image1","image2","imagesRatio","intensity1","intensity","intensity2","commonAngle","angle","Math","PI","angle1","angle2","speedIn","speed","speedOut","userHover","hover","easing","Expo","easeOut","video","scene","THREE","camera","offsetWidth","offsetHeight","position","z","renderer","antialias","alpha","setPixelRatio","setClearColor","setSize","appendChild","domElement","render","loader","crossOrigin","a1","a2","disp","load","magFilter","minFilter","animate","requestAnimationFrame","document","createElement","autoplay","loop","src","video2","texture1","texture2","addEventListener","play","mat","uniforms","value","imageAspect","type","dispFactor","res","dpr","window","devicePixelRatio","vertexShader","fragmentShader","transparent","opacity","geometry","object","add","transitionIn","transitionOut","e","material","next","previous","warn","TweenMax","to","ease","onUpdate","onComplete"],"sources":["C:\\Users\\Wards\\Desktop\\webs\\per\\node_modules\\hover-effect\\src\\hover-effect.js"],"sourcesContent":["import * as THREE from 'three';\nimport TweenMax from 'gsap/TweenMax';\n\nexport default function (opts) {\n\n  var vertex = `\nvarying vec2 vUv;\nvoid main() {\n  vUv = uv;\n  gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n}\n`;\n\n  var fragment = `\nvarying vec2 vUv;\n\nuniform float dispFactor;\nuniform float dpr;\nuniform sampler2D disp;\n\nuniform sampler2D texture1;\nuniform sampler2D texture2;\nuniform float angle1;\nuniform float angle2;\nuniform float intensity1;\nuniform float intensity2;\nuniform vec4 res;\nuniform vec2 parent;\n\nmat2 getRotM(float angle) {\n  float s = sin(angle);\n  float c = cos(angle);\n  return mat2(c, -s, s, c);\n}\n\nvoid main() {\n  vec4 disp = texture2D(disp, vUv);\n  vec2 dispVec = vec2(disp.r, disp.g);\n\n  vec2 uv = 0.5 * gl_FragCoord.xy / (res.xy) ;\n  vec2 myUV = (uv - vec2(0.5))*res.zw + vec2(0.5);\n\n\n  vec2 distortedPosition1 = myUV + getRotM(angle1) * dispVec * intensity1 * dispFactor;\n  vec2 distortedPosition2 = myUV + getRotM(angle2) * dispVec * intensity2 * (1.0 - dispFactor);\n  vec4 _texture1 = texture2D(texture1, distortedPosition1);\n  vec4 _texture2 = texture2D(texture2, distortedPosition2);\n  gl_FragColor = mix(_texture1, _texture2, dispFactor);\n}\n`;\n\n  // please respect authorship and do not remove\n  console.log('%c Hover effect by Robin Delaporte: https://github.com/robin-dela/hover-effect ', 'color: #bada55; font-size: 0.8rem');\n\n\n  function firstDefined() {\n    for (var i = 0; i < arguments.length; i++) {\n      if (arguments[i] !== undefined) return arguments[i];\n    }\n  }\n\n  var parent = opts.parent;\n  var dispImage = opts.displacementImage;\n  var image1 = opts.image1;\n  var image2 = opts.image2;\n  var imagesRatio = firstDefined(opts.imagesRatio, 1.0);\n  var intensity1 = firstDefined(opts.intensity1, opts.intensity, 1);\n  var intensity2 = firstDefined(opts.intensity2, opts.intensity, 1);\n  var commonAngle = firstDefined(opts.angle, Math.PI / 4); // 45 degrees by default, so grayscale images work correctly\n  var angle1 = firstDefined(opts.angle1, commonAngle);\n  var angle2 = firstDefined(opts.angle2, -commonAngle * 3);\n  var speedIn = firstDefined(opts.speedIn, opts.speed, 1.6);\n  var speedOut = firstDefined(opts.speedOut, opts.speed, 1.2);\n  var userHover = firstDefined(opts.hover, true);\n  var easing = firstDefined(opts.easing, Expo.easeOut);\n  var video = firstDefined(opts.video, false);\n\n  if (!parent) {\n    console.warn('Parent missing');\n    return;\n  }\n\n  if (!(image1 && image2 && dispImage)) {\n    console.warn('One or more images are missing');\n    return;\n  }\n\n  var scene = new THREE.Scene();\n  var camera = new THREE.OrthographicCamera(\n    parent.offsetWidth / -2,\n    parent.offsetWidth / 2,\n    parent.offsetHeight / 2,\n    parent.offsetHeight / -2,\n    1,\n    1000\n  );\n\n  camera.position.z = 1;\n\n  var renderer = new THREE.WebGLRenderer({\n    antialias: false,\n    alpha: true\n  });\n\n  renderer.setPixelRatio(2.0);\n  renderer.setClearColor(0xffffff, 0.0);\n  renderer.setSize(parent.offsetWidth, parent.offsetHeight);\n  parent.appendChild(renderer.domElement);\n\n  var render = function () {\n    // This will be called by the TextureLoader as well as TweenMax.\n    renderer.render(scene, camera);\n  };\n\n  var loader = new THREE.TextureLoader();\n  loader.crossOrigin = '';\n\n  var disp = loader.load(dispImage, render);\n  disp.magFilter = disp.minFilter = THREE.LinearFilter;\n\n  if (video) {\n    var animate = function() {\n        requestAnimationFrame(animate);\n\n        renderer.render(scene, camera);\n    };\n    animate();\n\n    var video = document.createElement('video');\n    video.autoplay = true;\n    video.loop = true;\n    video.src = image1;\n    video.load();\n\n    var video2 = document.createElement('video');\n    video2.autoplay = true;\n    video2.loop = true;\n    video2.src = image2;\n    video2.load();\n\n    var texture1 = new THREE.VideoTexture(video);\n    var texture2 = new THREE.VideoTexture(video2);\n    texture1.magFilter = texture2.magFilter = THREE.LinearFilter;\n    texture1.minFilter = texture2.minFilter = THREE.LinearFilter;\n\n    video2.addEventListener('loadeddata', function() {\n      video2.play();\n\n      texture2 = new THREE.VideoTexture(video2);\n      texture2.magFilter = THREE.LinearFilter;\n      texture2.minFilter = THREE.LinearFilter;\n\n      mat.uniforms.texture2.value = texture2;\n\n    }, false);\n\n    video.addEventListener('loadeddata', function() {\n      video.play();\n\n      texture1 = new THREE.VideoTexture(video);\n\n      texture1.magFilter = THREE.LinearFilter;\n      texture1.minFilter = THREE.LinearFilter;\n\n      mat.uniforms.texture1.value = texture1;\n    }, false);\n  } else {\n    var texture1 = loader.load(image1, render);\n    var texture2 = loader.load(image2, render);\n\n    texture1.magFilter = texture2.magFilter = THREE.LinearFilter;\n    texture1.minFilter = texture2.minFilter = THREE.LinearFilter;\n  }\n\n  let a1, a2;\n  var imageAspect = imagesRatio;\n  if (parent.offsetHeight / parent.offsetWidth < imageAspect) {\n    a1 = 1;\n    a2 = parent.offsetHeight / parent.offsetWidth / imageAspect;\n  } else {\n    a1 = (parent.offsetWidth / parent.offsetHeight) * imageAspect;\n    a2 = 1;\n  }\n\n  var mat = new THREE.ShaderMaterial({\n    uniforms: {\n      intensity1: {\n        type: 'f',\n        value: intensity1\n      },\n      intensity2: {\n        type: 'f',\n        value: intensity2\n      },\n      dispFactor: {\n        type: 'f',\n        value: 0.0\n      },\n      angle1: {\n        type: 'f',\n        value: angle1\n      },\n      angle2: {\n        type: 'f',\n        value: angle2\n      },\n      texture1: {\n        type: 't',\n        value: texture1\n      },\n      texture2: {\n        type: 't',\n        value: texture2\n      },\n      disp: {\n        type: 't',\n        value: disp\n      },\n      res: {\n        type: 'vec4',\n        value: new THREE.Vector4(parent.offsetWidth, parent.offsetHeight, a1, a2)\n      },\n      dpr: {\n        type: 'f',\n        value: window.devicePixelRatio\n      }\n    },\n\n    vertexShader: vertex,\n    fragmentShader: fragment,\n    transparent: true,\n    opacity: 1.0,\n  });\n\n  var geometry = new THREE.PlaneBufferGeometry(parent.offsetWidth, parent.offsetHeight, 1);\n  var object = new THREE.Mesh(geometry, mat);\n  scene.add(object);\n\n  function transitionIn() {\n    TweenMax.to(mat.uniforms.dispFactor, speedIn, {\n      value: 1,\n      ease: easing,\n      onUpdate: render,\n      onComplete: render,\n    });\n  }\n\n  function transitionOut() {\n    TweenMax.to(mat.uniforms.dispFactor, speedOut, {\n      value: 0,\n      ease: easing,\n      onUpdate: render,\n      onComplete: render,\n    });\n  }\n\n  if (userHover) {\n    parent.addEventListener('mouseenter', transitionIn);\n    parent.addEventListener('touchstart', transitionIn);\n    parent.addEventListener('mouseleave', transitionOut);\n    parent.addEventListener('touchend', transitionOut);\n  }\n\n  window.addEventListener('resize', function (e) {\n    if (parent.offsetHeight / parent.offsetWidth < imageAspect) {\n      a1 = 1;\n      a2 = parent.offsetHeight / parent.offsetWidth / imageAspect;\n    } else {\n      a1 = (parent.offsetWidth / parent.offsetHeight) * imageAspect;\n      a2 = 1;\n    }\n    object.material.uniforms.res.value = new THREE.Vector4(parent.offsetWidth, parent.offsetHeight, a1, a2);\n    renderer.setSize(parent.offsetWidth, parent.offsetHeight);\n\n    render()\n  });\n\n  this.next = transitionIn;\n  this.previous = transitionOut;\n};\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}